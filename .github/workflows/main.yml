name: CI/CD Pipeline for Dental Office Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: dental-office/backend
  EKS_CLUSTER_NAME: xavier-dental-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set ECR Registry URL
      run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
      
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY_BACKEND }} || aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY_BACKEND }}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest,${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

    - name: Update Kubernetes manifest with new image tags
      run: |
        # Create k8s directory if it doesn't exist
        mkdir -p k8s
        
        # Create or update Kubernetes manifest
        cat > k8s/backend-app.yaml << EOF
        ---
        apiVersion: v1
        kind: Namespace
        metadata:
          name: dental-app
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          namespace: dental-app
          name: backend-config
        data:
          NODE_ENV: "production"
          PORT: "5000"
          FRONTEND_URL: "http://frontend-service"
          LOG_LEVEL: "info"
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          namespace: dental-app
          name: backend-secrets
        type: Opaque
        data:
          MONGODB_URI: ${{ secrets.MONGODB_URI_BASE64 }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_BASE64 }}
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          namespace: dental-app
          name: backend-deployment
        spec:
          selector:
            matchLabels:
              app: dental-backend
          replicas: 2
          template:
            metadata:
              labels:
                app: dental-backend
            spec:
              containers:
              - image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
                imagePullPolicy: Always
                name: backend
                ports:
                - containerPort: 5000
                envFrom:
                - configMapRef:
                    name: backend-config
                - secretRef:
                    name: backend-secrets
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "100m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 5
                  periodSeconds: 10
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 15
                  periodSeconds: 20
        ---
        apiVersion: v1
        kind: Service
        metadata:
          namespace: dental-app
          name: backend-service
        spec:
          ports:
            - port: 80
              targetPort: 5000
              protocol: TCP
          type: ClusterIP
          selector:
            app: dental-backend
        EOF

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      
    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s/backend-app.yaml
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/backend-deployment -n dental-app
